//Congruence Modulo
class Solution {
public:
    // bool checkSubarraySum(vector<int>& nums, int k) {
    //     vector<int>pref(nums.size(),0);
    //     pref[0]=nums[0];
    //     int n=nums.size();
    //     for(int i=1;i<n;i++)
    //     {
    //         pref[i]=pref[i-1]+nums[i];
    //     }
    //     int sum=nums[0],fr=0;
    //     for(int i=1;i<n;i++)
    //     {
    //         if(pref[i]%k==0)return true;
    //         for(int j=0;j<i-1;j++)
    //         {
    //             if((pref[i]-pref[j])%k==0)
    //             {
    //                 return true;
    //             }
    //         }
    //     }
    //     return false;
    // }
     bool checkSubarraySum(vector<int>& nums, int k) {
        ios::sync_with_stdio(false); 
        cin.tie(0); 
        cout.tie(0);
        unordered_map<int,int>mp;
        mp[0]=-1;
        int sum=0,n=nums.size();
        for(int i=0;i<n;i++)
        {
            sum+=nums[i];//prefix sum
            if(mp.find(sum%k)!=mp.end())
            {
                if(i-mp[sum%k]>=2)//Congruence Modulo approach
                return true;
            }
            else
            mp[sum%k]=i;
        }
        return false;
     }
};

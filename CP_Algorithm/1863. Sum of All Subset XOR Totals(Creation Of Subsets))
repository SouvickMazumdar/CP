class Solution {
public:

    // For our vector subset, at every step we have A.size()-i-1
    // choices to include. A loop helps us to choose each element
    // and then move to the indices further present in the array.
    // At the end we backtrack to choose a different index.
    void subsetsUtil(vector<int>& A, vector<vector<int> >& res,
                    vector<int>& subset, int index)
    {
        res.push_back(subset);
        // Loop to choose from different elements present
        // after the current index 'index'
        for (int i = index; i < A.size(); i++) {

            // include the A[i] in subset.
            subset.push_back(A[i]);

            // move onto the next element.
            subsetsUtil(A, res, subset, i + 1);

            // exclude the A[i] from subset and triggers
            // backtracking.
            subset.pop_back();
        }

        return;
    }

    // below function returns the subsets of vector A.
    vector<vector<int> > subsets(vector<int>& A)
    {
        vector<int> subset;
        vector<vector<int> > res;

        // keeps track of current element in vector A
        // and the number of elements present in the array subset
        int index = 0;
        subsetsUtil(A, res, subset, index);

        return res;
    }

    int subsetXORSum(vector<int>& nums) {
        vector<vector<int>>res = subsets(nums);
        int sum=0;
        for(auto it:res)
        {
            int k=0;
            for(int i:it)
            {
                k^=i;
            }
            sum+=k;
        }
        return sum;
    }
};

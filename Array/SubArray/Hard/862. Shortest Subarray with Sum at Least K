class Solution {
public:
    int shortestSubarray(vector<int>& nums, int k) {
        int n=nums.size();
        vector<long long int>pre(n);
        deque<pair<long long int,long long int>>dq;
        pre[0]=nums[0];
        long long int mini=INT_MAX;
        for(int i=1;i<n;i++)
        {
            pre[i]=pre[i-1]+nums[i];
        }
        // we have to maintain the monotonic ascending order
        for(long long int i=0;i<n;i++)
        {
            if(pre[i]>=k)mini=min(mini,i+1);
            while(!dq.empty() && pre[i]-dq.front().second>=k)
            {
                mini=min(mini,i-dq.front().first);
                dq.pop_front();
            }
//here we are just removing those element from the back wich is more than " pre[i] " so that we maintain the ascending order in the dequeue and fit the pre[i], just above the smaller value
            while(!dq.empty() && pre[i]<=dq.back().second)
            {
                dq.pop_back();
            }
            dq.push_back({i,pre[i]});
        }
        return mini==INT_MAX?-1:mini;
    }
};

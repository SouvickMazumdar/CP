//https://www.codingninjas.com/codestudio/problems/minimum-path-sum
//*********************Normal Recursion*******************
// int f(int i,int j,vector<vector<int>>&grid)
// {
//     if(i==0&&j==0)
//         return grid[0][0];
//     if(i<0||j<0)
//         return 1e9;
//     int up=grid[i][j]+f(i-1,j,grid);
//     int left=grid[i][j]+f(i,j-1,grid);
//     return min(up,left);
// }
//*********************Memoization*******************
//TC=O(N*M)
//SC=O(Stack Space)+O(path length)
//SC=O(N*M)+ O((N-1)+(M-1))
// int f(int i,int j,vector<vector<int>>&grid,vector<vector<int>>&dp)
// {
//     if(i==0&&j==0)
//         return grid[0][0];
//     if(i<0||j<0)
//         return 1e9;
//     if(dp[i][j]!=-1)return dp[i][j];
//     int up=grid[i][j]+f(i-1,j,grid,dp);
//     int left=grid[i][j]+f(i,j-1,grid,dp);
//     return dp[i][j]=min(up,left);
// }
//*********************Tabulation*******************
//TC=O(N*M)
//SC= O((N-1)+(M-1))

// int f(int a,int b,vector<vector<int>>&grid,vector<vector<int>>&dp)
// {
//     for(int i=0;i<=a;i++)
//     {
//         for(int j=0;j<=b;j++)
//         {
//             if(i==0&&j==0)dp[i][j]=grid[i][j];
//             else
//             {
//                 int up=1e9,left=1e9;
//                 if(i>0)up=grid[i][j]+dp[i-1][j];
//                 if(j>0)left=grid[i][j]+dp[i][j-1];
//                 dp[i][j]=min(up,left);
//             }
//         }
//     }
//    return dp[a][b];
// }
//*********************Space Optimization*******************
//TC=O(N*M)
//SC= O(N) or O(M)
int f(int a,int b,vector<vector<int>>&grid)
{
    vector<int> prev(b+1,0);
    for(int i=0;i<=a;i++)
    {
         vector<int> curri(b+1,0);
        for(int j=0;j<=b;j++)
        {
            if(i==0&&j==0)curri[j]=grid[i][j];
            else
            {
                int up=1e9,left=1e9;
                if(i>0)up=grid[i][j]+prev[j];
                if(j>0)left=grid[i][j]+curri[j-1];
                curri[j]=min(up,left);
            }
        }
        prev=curri;
    }
   return prev[b];
}
int minSumPath(vector<vector<int>> &grid) {
    // Write your code here.
    int n=grid.size();
    int m=grid[0].size();
    //vector<vector<int>> dp(n,vector<int>(m,-1));
//     return(f(n-1,m-1,grid,dp));
     return(f(n-1,m-1,grid));
}
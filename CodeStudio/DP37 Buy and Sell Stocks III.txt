//https://www.codingninjas.com/codestudio/problems/buy-and-sell-stock_1071012?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0
#include <bits/stdc++.h>
// int recursion(int ind , int buy,int cap,int n,vector<int>&val)
// {
//     if(cap==0)
//         return 0;
//     if(ind==n)
//         return 0;
//     int profit=0;
//     if(buy)
//         profit=max(-val[ind]+recursion(ind+1,0,cap,n,val),0+recursion(ind+1,1,cap,n,val));
//     else//avoid using increment and decrement operator, int place use +1 or -1
//         profit=max(val[ind]+recursion(ind+1,1,cap-1,n,val),0+recursion(ind+1,0,cap,n,val));
//     return profit;
// }
// int memo(int ind,int buy,int cap,int n,vector<int>&val,vector<vector<vector<int>>>&dp)
// {
//     if(cap==0)
//         return 0;
//     if(ind==n)
//         return 0;
//     if(dp[ind][buy][cap]!=-1)return dp[ind][buy][cap];
//     int profit=0;
//     if(buy)
//         profit=max(-val[ind]+memo(ind+1,0,cap,n,val,dp),0+memo(ind+1,1,cap,n,val,dp));
//     else//avoid using increment and decrement operator, int place use +1 or -1
//         profit=max(val[ind]+memo(ind+1,1,cap-1,n,val,dp),0+memo(ind+1,0,cap,n,val,dp));
//     return dp[ind][buy][cap]=profit;
// }
// int tabulation(int n,vector<int>&val,vector<vector<vector<int>>>&dp)
// {
//     int profit=0;
//     for(int ind=n-1;ind>=0;ind--)//bottom up approach
//     {
//         for(int buy=0;buy<2;buy++)//bottom up approach
//         {
//             for(int cap=1;cap<3;cap++)//bottom up approach
//                 //cap is started from 1 because for every cap==0 value is 0
//             {
//                  if(buy)
//                     profit=max(-val[ind]+dp[ind+1][0][cap],0+dp[ind+1][1][cap]);
//                 else//avoid using increment and decrement operator, int place use +1 or -1
//                     profit=max(val[ind]+dp[ind+1][1][cap-1],0+dp[ind+1][0][cap]);
//                 dp[ind][buy][cap]=profit;   
//             }
//         }
//     }
                               
//     return dp[0][1][2];
// }
// int space_optimization(int n,vector<int>&val)
// {
//     vector<vector<int>>after(2,vector<int>(3,0)),cur(2,vector<int>(3,0));
//      int profit=0;
//     for(int ind=n-1;ind>=0;ind--)//bottom up approach
//     {
//         for(int buy=0;buy<2;buy++)//bottom up approach
//         {
//             for(int cap=1;cap<3;cap++)//bottom up approach
//                 //cap is started from 1 because for every cap==0 value is 0
//             {
//                  if(buy)
//                     profit=max(-val[ind]+after[0][cap],0+after[1][cap]);
//                 else//avoid using increment and decrement operator, int place use +1 or -1
//                     profit=max(val[ind]+after[1][cap-1],0+after[0][cap]);
//                 cur[buy][cap]=profit;   
//             }
//         }
//         after=cur;
//     }
                               
//     return after[1][2];
// }
// int maxProfit(vector<int>& prices, int n)
// {
//     // Write your code here.
//     //return recursion(0,1,2,n,prices);
// //     vector<vector<vector<int>>>dp(n,vector<vector<int>>(2,vector<int>(3,-1)));
// //     return memo(0,1,2,n,prices,dp);
// //      vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(3,0)));
// //     //array size== nX2X3
// //     return tabulation(n,prices,dp);
//     return space_optimization(n,prices);
// }
//****************************** N*4 APProach ie even odd appraoch  (TRANSACTION)********************
int recursion_new(int ind ,int trans,int n,vector<int>&val)
{
    if(trans==0)
        return 0;
    if(ind==n)
        return 0;
    int profit=0;
    if(trans%2==0)
        profit=max(-val[ind]+recursion_new(ind+1,trans-1,n,val),0+recursion_new(ind+1,trans,n,val));
    else//avoid using increment and decrement operator, int place use +1 or -1
        profit=max(val[ind]+recursion_new(ind+1,trans-1,n,val),0+recursion_new(ind+1,trans,n,val));
    return profit;
}
int memo_new(int ind,int trans,int n,vector<int>&val,vector<vector<int>> &dp)
{
    if(trans==0)
        return 0;
    if(ind==n)
        return 0;
    if(dp[ind][trans]!=-1)return dp[ind][trans];
    int profit=0;
    if(trans%2==0)
        profit=max(-val[ind]+memo_new(ind+1,trans-1,n,val,dp),0+memo_new(ind+1,trans,n,val,dp));
    else//avoid using increment and decrement operator, int place use +1 or -1
        profit=max(val[ind]+memo_new(ind+1,trans-1,n,val,dp),0+memo_new(ind+1,trans,n,val,dp));
    return dp[ind][trans]=profit;
}
int tabulation_new(int n,vector<int>&val,vector<vector<int>>&dp)
{
    int profit=0;
    for(int ind=n-1;ind>=0;ind--)//bottom up approach
    {
        for(int trans=1;trans<=4;trans++)//bottom up approach
        {
                 if(trans%2==0)
                    profit=max(-val[ind]+dp[ind+1][trans-1],0+dp[ind+1][trans]);
                else//avoid using increment and decrement operator, int place use +1 or -1
                    profit=max(val[ind]+dp[ind+1][trans-1],0+dp[ind+1][trans]);
                dp[ind][trans]=profit;   
        }
    }
                               
    return dp[0][4];
}
int space_optimization_new(int n,vector<int>&val)
{
    vector<int>after(5,0),cur(5,0);
    int profit=0;
    for(int ind=n-1;ind>=0;ind--)//bottom up approach
    {
        for(int trans=1;trans<=4;trans++)//bottom up approach
        {
                 if(trans%2==0)
                    profit=max(-val[ind]+after[trans-1],0+after[trans]);
                else//avoid using increment and decrement operator, int place use +1 or -1
                    profit=max(val[ind]+after[trans-1],0+after[trans]);
                cur[trans]=profit;   
        }
        after=cur;
    }
                               
    return after[4];
}
int maxProfit(vector<int>& prices, int n)
{
    // Write your code here.
//     int transaction=2*2;//twice the required transaction
//     return recursion_new(0,transaction,n,prices);
//     vector<vector<int>>dp(n,vector<int>(5,-1));
//     return memo_new(0,4,n,prices,dp);
//      vector<vector<int>>dp(n+1,vector<int>(5,0));
//     //array size== nX2X3
//     return tabulation_new(n,prices,dp);
    return space_optimization_new(n,prices);
}
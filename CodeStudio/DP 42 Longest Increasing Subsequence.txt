#include <bits/stdc++.h>
//********************Recursion*****************
//TC: O(2^N)
//SC: O(N)
int recursion(int arr[], int n, int ind, int prev)
{
    if(ind==n)return 0;
    int len= 0+recursion(arr, n, ind+1,prev);
    if(prev==-1 || arr[prev]<arr[ind])
        len=max(len, 1+recursion(arr, n, ind+1, ind));
    return len;
}
//********************MEMOIZATION*****************
//TC: O(N*N)
//SC: O(N*N)+O(N)
int memo(int arr[], int n, int ind, int prev, vector<vector<int>> &dp)
{
      if(ind==n)return 0;
    if(dp[ind][prev+1]!=-1) return dp[ind][prev+1];
        int len= 0+memo(arr, n, ind+1,prev, dp);
        if(prev==-1 || arr[prev]<arr[ind])
            len=max(len, 1+memo(arr, n, ind+1, ind, dp));
        return dp[ind][prev+1]=len;   
}
//********************TABULATION*****************
//TC: O(N*N)
//SC: O(N*N)
int tabulation(int arr[], int n)
{
     vector<vector<int>> dp(n+1,vector<int>(n+1,0));
    for(int ind=n-1;ind>=0;ind--)
    {
        for(int prev=ind-1;prev>=-1;prev--)
        {
            int len= 0+dp[ind+1][prev+1];
            if(prev==-1 || arr[prev]<arr[ind])
                len=max(len, 1+dp[ind+1][ind+1]);
            dp[ind][prev+1]=len;
        }
        
    }
    return dp[0][-1+1];
}
//********************SPACE OPTIMIZATION*****************
//TC: O(N*N)
//SC: O(N)
int spaceOptmization(int arr[], int n)
{
    vector<int>next(n+1,0),cur(n+1,0);
    for(int ind=n-1;ind>=0;ind--)
    {
        for(int prev=ind-1;prev>=-1;prev--)
        {
            int len= 0+next[prev+1];
            if(prev==-1 || arr[prev]<arr[ind])
                len=max(len, 1+next[ind+1]);
            cur[prev+1]=len;
        }
        next=cur;
    }
    return cur[-1+1];
}

//Special code

int func(int arr[],int n)
{
    vector<int>dp(n,1);
    int maxi=1;
    for(int i=0;i<n;i++)
    {
        for(int prev=0;prev<i;prev++)
        {
            if(arr[prev]<arr[i])
                dp[i]=max(dp[i],1+dp[prev]);
        }
        maxi=max(maxi,dp[i]);
    }
    return maxi;
}
//PRINTING THE ALIAS USING HASHMAP
int print_LIS(int arr[], int n)
{
    vector<int>dp(n,1),hash(n);
    int maxi=1;
    int lastIndex=0;
    for(int i=0;i<n;i++)
    {
        hash[i]=i;
        for(int prev=0;prev<i;prev++)
        {
            if(arr[prev]<arr[i] && dp[i]<1+dp[prev])
            {
                dp[i]=1+dp[prev];
                hash[i]=prev;
            }
        }
        if(dp[i]>maxi)
        {
            maxi=dp[i];
            lastIndex=i;
        }
    }
    vector<int> temp;
    temp.push_back(arr[lastIndex]);
    while(hash[lastIndex]!=lastIndex)
    {
        lastIndex=hash[lastIndex];
        temp.push_back(arr[lastIndex]);
    }
    reverse(temp.begin(),temp.end());
   // for(auto it: temp)cout<<it<<" "<<endl;
    return maxi;
}


int longestIncreasingSubsequence(int arr[], int n)
{
    // Write Your Code here
    //recursion(arr,n,0,-1);
    
//     vector<vector<int>> dp(n,vector<int>(n+1,-1));
//    return  memo(arr, n, 0, -1, dp);
    
 //   return tabulation(arr,n);
    
//      return spaceOptmization(arr,n);
    
    return print_LIS(arr,n);
}

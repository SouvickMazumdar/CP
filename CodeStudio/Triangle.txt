//https://www.codingninjas.com/codestudio/problems/triangle
//******************* Dynamic approach****************
//TC=O(N*N)
//SC=O(N)+O(N*N)
// int f(int i, int j,int n, vector<vector<int>> &a,vector<vector<int>> &dp)
// {
//     if(i==n-1)
//         return a[i][j];
//     if(dp[i][j]!=-1) return dp[i][j];
//    int d=a[i][j]+f(i+1,j,n,a,dp);
//    int dg=a[i][j]+f(i+1,j+1,n,a,dp);
//     return dp[i][j]=min(d,dg);
    
// }
//******************* Tabulation****************
//TC=O(N*N)
//SC=O(N*N)
// int f(int n, vector<vector<int>> &a,vector<vector<int>> &dp)
// {
//     for(int i=0;i<n;i++)
//     {
//         dp[n-1][i]=a[n-1][i];
//     }
//     for(int i=n-2;i>=0;i--)
//     {
//         for(int j=i;j>=0;j--)
//         {
//             int d=a[i][j]+dp[i+1][j];
//             int dg=a[i][j]+dp[i+1][j+1];
//             dp[i][j]=min(d,dg);
//         }
//     }
//     return dp[0][0];
// }
//******************* Space Optimization ****************
//TC=O(N*N)
//SC=O(N)
int f(int n, vector<vector<int>> &a)
{
    vector<int>prev(n,0);
    for(int i=0;i<n;i++)
    {
        prev[i]=a[n-1][i];
    }
    for(int i=n-2;i>=0;i--)
    {
        vector<int> curi(i+1,0);
        for(int j=i;j>=0;j--)
        {
            int d=a[i][j]+prev[j];
            int dg=a[i][j]+prev[j+1];
            curi[j]=min(d,dg);
        }
        prev=curi;
    }
    return prev[0];
}

int minimumPathSum(vector<vector<int>>& triangle, int n){
	// Write your code here.
    vector<vector<int>> dp(n,vector<int>(n,-1));
   // return (f(0,0,n,triangle,dp));
//     return (f(n,triangle,dp));
      return (f(n,triangle));

}
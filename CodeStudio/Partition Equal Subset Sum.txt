//https://www.codingninjas.com/codestudio/problems/partition-equal-subset-sum
bool f(int ind,int target,vector<int>&arr,vector<vector<int>>&dp)
{
    if(target==0)
        return true;
    if(ind==0)return arr[0]==target;
    if(dp[ind][target]!=-1)return dp[ind][target];
    bool notTake=f(ind-1,target,arr,dp);
    bool Take=false;
    if(arr[ind]<=target)
    {
        Take=f(ind-1,target-arr[ind],arr,dp);
    }
    return dp[ind][target]=notTake|Take;
}
bool canPartition(vector<int> &arr, int n)
{
    int sum=0;
    for(int i=0;i<n;i++)
    {
        sum+=arr[i];
    }
    if(sum%2!=0)return false;
    int k=sum/2;
//***************TABULATION****************
//     vector<vector<int>> dp(n,vector<int>(target+1,-1));
//     vector<vector<bool>> dp(n,vector<bool>(k+1,false));
//     for(int i=0;i<n;i++)
//     {
//         dp[i][0]=true;
//     }
//     dp[0][arr[0]]=true;
//     for(int ind=1;ind<n;ind++)
//     {
//         for(int target=1;target<=k;target++)
//         {
//             bool notTake=dp[ind-1][target];
//             bool Take=false;
//             if(arr[ind]<=target)
//             {
//                 Take=dp[ind-1][target-arr[ind]];
//             }
//             dp[ind][target]=Take|notTake;
//         }
//     }
//     return dp[n-1][k];
//************************Space Optimization**************
    vector<bool> prev(k+1,0),curi(k+1,0);
    prev[0]=curi[0]=true;
    for(int ind=1;ind<n;ind++)
    {
        for(int target=1;target<=k;target++)
        {
            bool notTake=prev[target];
            bool Take=false;
            if(arr[ind]<=target)
            {
                Take=prev[target-arr[ind]];
            }
            curi[target]=Take|notTake;
        }
        prev=curi;
    }
    return prev[k];
    
//     return f(n-1,target,arr,dp);
	// Write your code here.
}

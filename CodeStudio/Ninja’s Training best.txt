//https://www.codingninjas.com/codestudio/problems/ninja-s-training
//******************************* Dynamic Approach***************************
//TC=O(n*4)*3
//SC=O(N)+O(N*4)
int f(int day,int last,vector<vector<int>> &task,vector<vector<int>> &dp)
{
    if(day==0)
    {
        int maxi=0;
        for(int i=0;i<3;i++)
        {
            if(i!=last)
            {
                maxi=max(maxi,task[0][i]);
            }
        }
        return maxi;
    }
    int maxi=0;
    if(dp[day][last]!=-1) return dp[day][last];
    for(int i=0;i<3;i++)
    {
        if(i!=last)
        {
            int points=task[day][i]+f(day-1,i,task,dp);
            maxi=max(maxi,points);
        }
    }
    return dp[day][last]=maxi;
}
//*******************************Tabulation Approach***************************
//TC=O(N*4)*3
//SC=O(N*4)
// int ninjaTraining(int n, vector<vector<int>> &points)
// {
//     // Write your code here.
//     vector<vector<int>> dp(n,vector<int>(4,0));
//     dp[0][0]=max(points[0][1],points[0][2]);
//     dp[0][1]=max(points[0][0],points[0][2]);
//     dp[0][2]=max(points[0][0],points[0][1]);
//     dp[0][3]=max(points[0][0],max(points[0][1],points[0][2]));
//     for(int day=1;day<n;day++)
//     {
//         for(int last=0;last<=3;last++)
//         {
//             dp[day][last]=0;
//              for(int task=0;task<3;task++)
//              {
//                  if(task!=last)
//                  {
//                      int po=points[day][task]+dp[day-1][task];
//                       dp[day][last]=max( dp[day][last],po);
//                  }
//              }
//         }
//     }
    
//     return dp[n-1][3];
        
    
// }
//*******************************Space Optimization Approach***************************
//TC=O(n*4)*3
//SC=O(4)
int ninjaTraining(int n, vector<vector<int>> &points)
{
    // Write your code here.
    vector<int>prev(4,0);
    prev[0]=max(points[0][1],points[0][2]);
    prev[1]=max(points[0][0],points[0][2]);
    prev[2]=max(points[0][0],points[0][1]);
    prev[3]=max(points[0][0],max(points[0][1],points[0][2]));
    for(int day=1;day<n;day++)
    {
        vector<int> temp(4,0);
        for(int last=0;last<=3;last++)
        {
            
             for(int task=0;task<3;task++)
             {
                 if(task!=last)
                 {
                      temp[last]=max( temp[last],points[day][task]+prev[task]);
                 }
             }
        }
        prev=temp;
    }
    
    return prev[3];
        
    
}
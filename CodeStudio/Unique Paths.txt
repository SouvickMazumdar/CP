//https://www.codingninjas.com/codestudio/problems/total-unique-paths
#include <bits/stdc++.h> 
//Basic Recursive approach
//TC=O(2^(M+N))
//SC=O((N-1)+(M-1))+O(N*M)
// int f(int i, int j)
// {
//     if(i==0 && j==0)
//         return 1;
//     if(i<0 || j<0)
//         return 0;
//     int up=f(i-1,j);
//     int left=f(i,j-1);
//     return up+left;
// }
//**************DP Approach*************
//TC=O(M*N)
//SC=O((N-1)+(M-1))+O(N*M)
// int f(int i, int j,vector<vector<int>> &dp)
// {
//     if(i==0 && j==0)
//         return 1;
//     if(i<0 || j<0)
//         return 0;
//     if(dp[i][j]!=-1) return dp[i][j];
//     int up=f(i-1,j,dp);
//     int left=f(i,j-1,dp);
//     return dp[i][j]=up+left;
// }
//**************Tabulation Approach*************
//TC=O(M*N)
//SC=O(N*M)
// int f(int a, int b,vector<vector<int>> &dp)
// {
//     dp[0][0]=1;
//     for(int i=0;i<=a;i++)
//     {
//         for(int j=0;j<=b;j++)
//         {
//             int up=0,left=0;
//             if(i>0) up=dp[i-1][j];
//             if(j>0) left=dp[i][j-1];
//             if(dp[i][j]==-1)dp[i][j]=up+left;
//         }
//     }
//     return dp[a][b];
// }
//**************SpaceOptimization Approach*************
//TC=O(M*N)
//SC=O(N)
int f(int a, int b)
{
    vector<int> prev(b+1,0);
    for(int i=0;i<=a;i++)
    {
        vector<int> temp(b+1,0);
        for(int j=0;j<=b;j++)
        {
            if(i==0 && j==0)temp[j]=1;
           else
           {
               int up=0,left=0;
            if(i>0) up=prev[j];
            if(j>0) left=temp[j-1];
            temp[j]=up+left;
           }
        }
        prev=temp;
    }
    return prev[b];
}
int uniquePaths(int m, int n) {
	// Write your code here.
    vector<vector<int>> dp(m,vector<int>(n,-1));
    return(f(m-1,n-1));
}
//Also search this question in google for more optimized code that is TC=O(M)
#include<bits/stdc++.h>
//*****************Memorization**************
// int f(int ind,vector<int> &nums,vector<int> &dp)
// {
//     if(ind==0)return nums[ind];
//     if(ind<0)return 0;
//     if(dp[ind]!=-1)return dp[ind];
//     int pick=nums[ind]+f(ind-2,nums,dp);
//     int notpick=0+f(ind-1,nums,dp);
//     return dp[ind]=max(pick,notpick);
// }
//*****************Tabulation*****************
//int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
//     int k=nums.size();
//     vector<int> dp(k,-1);
//     dp[0]=nums[0];
//     int right=INT_MIN;
//     for(int i=1;i<k;i++)
//     {
//         right=nums[i];
//         if(i>=2)
//         {
//             right+=dp[i-2];
//         }
//         int left=dp[i-1];
//         dp[i]=max(right,left);
//     }
//     return dp[k-1];
// }
//*************Space Optimization*************
int maximumNonAdjacentSum(vector<int> &nums){
    int n=nums.size();
    int prev=nums[0];
    int prev2=0;
    for(int i=1;i<n;i++)
    {
       int take=nums[i];
        if(i>1) take+=prev2;
        int nontake=prev;
        int curi=max(take,nontake);
        prev2=prev;
        prev=curi;
    }
    return prev;
}
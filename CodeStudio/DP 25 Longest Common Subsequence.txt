//https://www.codingninjas.com/codestudio/problems/longest-common-subsequence
#include<bits/stdc++.h>
int recursion(int i,int j,string &s,string &t)//we can pass string as pointer just to avoid new string at every call which may lead to TLE
{
    if(i<0||j<0)return 0;
    if(s[i]==t[j])return 1+recursion(i-1,j-1,s,t);
    return max(recursion(i-1,j,s,t),recursion(i,j-1,s,t));
}
int memo(int i,int j, string &s, string &t, vector<vector<int>>&dp)
{
    if(i<0||j<0)return 0;
    if(dp[i][j]!=-1)return dp[i][j];
    if(s[i]==t[j])return dp[i][j]=1+memo(i-1,j-1,s,t,dp);
    return dp[i][j]=max(memo(i-1,j,s,t,dp),memo(i,j-1,s,t,dp));
}

int tabulation(int n,int m, string &s, string &t,vector<vector<int>>&dp)
{
     for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
           if(s[i]==t[j])
           {
               if(i==0||j==0)dp[i][j]=1;
               else dp[i][j]=1+dp[i-1][j-1];
           }
            else
            {
                int a=0,b=0;//here we can not use INT_MIN because some positions of dp array is initialized with INT_MIN due to which whole answer is modified as -100000000000+1=-9999999999... this is creating the problem
                if(i>0)a=dp[i-1][j];
                if(j>0)b=dp[i][j-1];
                dp[i][j]=max(a,b);
            } 
        }
    }
    return dp[n-1][m-1];
}
int space_optimization(int n,int m, string &s, string &t)
{
    vector<int> prev(m,0),curi(m,0);
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
           if(s[i]==t[j])
           {
               if(i==0||j==0)curi[j]=1;
               else curi[j]=1+prev[j-1];
           }
            else
            {
                int a=0,b=0;//here we can not use INT_MIN because some positions of dp array is initialized with INT_MIN due to which whole answer is modified as -100000000000+1=-9999999999... this is creating the problem
                if(i>0)a=prev[j];
                if(j>0)b=curi[j-1];
                curi[j]=max(a,b);
            } 
        }
        prev=curi;
    }
    return prev[m-1];
}
int lcs(string s, string t)
{
    int n=s.size();
    int m=t.size();
    //return recursion(n-1,m-1,s,t);
    //vector<vector<int>> dp(n,vector<int>(m,-1));
//     return memo(n-1,m-1,s,t,dp);
    
//     vector<vector<int>> dp(n,vector<int>(m,0));
//     int k=tabulation(n,m,s,t,dp);
    
    int k=space_optimization(n,m,s,t);
    return k;
}
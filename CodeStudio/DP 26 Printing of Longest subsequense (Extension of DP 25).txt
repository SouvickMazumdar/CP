//********************TABULATION******************
//TC=O(M*N)
//SC=O(M*N)
int tabulation(int n,int m, string &s, string &t,vector<vector<int>>&dp)
{
     for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
           if(s[i]==t[j])
           {
               if(i==0||j==0)dp[i][j]=1;
               else dp[i][j]=1+dp[i-1][j-1];
           }
            else
            {
                int a=0,b=0;//here we can not use INT_MIN because some positions of dp array is initialized with INT_MIN due to which whole answer is modified as -100000000000+1=-9999999999... this is creating the problem
                if(i>0)a=dp[i-1][j];
                if(j>0)b=dp[i][j-1];
                dp[i][j]=max(a,b);
            } 
        }
    }
    return dp[n-1][m-1];
}

int lcs(string s, string t)
{
    int n=s.size();
    int m=t.size();
  
    vector<vector<int>> dp(n,vector<int>(m,0));
    int k=tabulation(n,m,s,t,dp);

    //To print the longest subsequence using the dp matrix

    string lcs="";
    for(int i=0;i<k;i++) lcs+="$";
    int index=k-1;
    int i=n-1,j=m-1;
    while(i>=0 && j>=0)
    {
        if(s[i]==t[j])
        {
            lcs[index--]=s[i];i--;j--;            
        }
        else
        {
            int top=0,left=0;
            if(i>0) top=dp[i-1][j];
            if(j>0) left=dp[i][j-1];
            if(top>left)i--;
            else j--;
        } 
    }
    //cout<<lcs<<endl;
    return k;
}
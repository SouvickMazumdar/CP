//https://www.codingninjas.com/codestudio/problems/wildcard-pattern-matching
#include<bits/stdc++.h>
//***************************RECURSION******************
//TC=EXPONENTIAL
//SC=O(N+M)
bool recursion(int i,int j,string &s,string &t)
{
    if(i<0 && j<0)return true;
    if(i<0 && j>=0)return false;
    if(j<0 && i>=0)
    {
        for(int k=0;k<=i;k++)
        {
            if(s[k]!='*')return false;
        }
        return true;
    }
    if(s[i]==t[j]||s[i]=='?')
        return recursion(i-1,j-1,s,t);
    if(s[i]=='*')
        return (recursion(i-1,j,s,t)||recursion(i,j-1,s,t));
    return false;
}
//***************************MEMOIZATION******************
//TC=O(N*M)
//SC=O(N*M)+O(N+M)
bool memo(int i,int j, string &s, string &t, vector<vector<int>> &dp)
{
    if(i<0 && j<0)return true;
    if(i<0 && j>=0)return false;
    if(j<0 && i>=0)
    {
        for(int k=0;k<=i;k++)
        {
            if(s[k]!='*')return false;
        }
        return true;
    }
    if(dp[i][j]!=-1)return dp[i][j];
    if(s[i]==t[j]||s[i]=='?')
        return dp[i][j]=memo(i-1,j-1,s,t,dp);
    if(s[i]=='*')
        return dp[i][j]=(memo(i-1,j,s,t,dp)||memo(i,j-1,s,t,dp));
    return dp[i][j]=false;
}
//***************************TABULATION******************
//TC=O(N*M)
//SC=O(N*M)
bool tabulation(int n,int m, string &s, string &t, vector<vector<bool>> &dp)
{
   dp[0][0]=true;
   for(int j=1;j<=m;j++)dp[0][j]=false;
   for(int i=1;i<=n;i++)
   {
       int p=0;
        for(int k=1;k<=i;k++)
        {
            if(s[k-1]!='*')
            {
                dp[i][0]=false;p=1;
            }
        }
        if(p==0)
            dp[i][0]=true;
    }
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            if(s[i-1]==t[j-1]||s[i-1]=='?')
                 dp[i][j]=dp[i-1][j-1];
            else if(s[i-1]=='*')
                 dp[i][j]=(dp[i-1][j]|dp[i][j-1]);
            else dp[i][j]=false;
        }
    }
    return dp[n][m];
    
}
//***************************SPACE OPTIMIZATION******************
//TC=O(N*M)
//SC=O(M)
bool space_optimization(int n,int m, string &s, string &t)
{
    vector<bool>prev(m+1,false),cur(m+1,false);
   prev[0]=true;
   for(int j=1;j<=m;j++)prev[j]=false;
    for(int i=1;i<=n;i++)
    {
         bool flag=true;
            for(int k=1;k<=i;k++)
            {
                if(s[k-1]!='*')
                {
                    flag=false;break;
                }
            }
              cur[0]=flag;
        for(int j=1;j<=m;j++)
        {
            if(s[i-1]==t[j-1]||s[i-1]=='?')
                cur[j]=prev[j-1];
            else if(s[i-1]=='*')
                cur[j]=(prev[j]|cur[j-1]);
            else cur[j]=false;
        }
        prev=cur;
    }
    return prev[m];
    
}
bool wildcardMatching(string pattern, string text)
{
   // Write your code here.
    int n=pattern.size(),m=text.size();
   // return recursion(n-1,m-1,pattern,text);
//     vector<vector<int>> dp(n,vector<int>(m,-1));
//     return memo(n-1,m-1,pattern, text,dp);
//     vector<vector<bool>> dp(n+1,vector<bool>(m+1,false));
//     return tabulation(n,m,pattern, text,dp);

    return space_optimization(n,m,pattern, text);
}

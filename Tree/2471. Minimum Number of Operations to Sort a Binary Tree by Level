/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int check(int n,vector<int>ar)
    {
        map<int,int>mp;
        for(int i=0;i<n;i++)
        {
            mp[ar[i]]=i;
        }
        sort(ar.begin(),ar.end());
        // for(auto it:mp)cout<<it.first<<" "<<it.second<<endl;
        vector<bool>vis(n,false);
        int ans=0;
        for(int i=0;i<n;i++)
        {
            
            if(vis[i]||mp[ar[i]]==i)continue;
            // int cycle_st=0;
            int cnt=0;
            int j=i;
            while(!vis[j])
            {
                // cout<<j<<endl;
                vis[j]=true;
                j=mp[ar[j]];
                cnt++;
            }
            if(cnt>0)
            ans+=(cnt-1);
        }
        return ans;
    }
    int bfs(TreeNode*root)
    {
        if (!root) return 0;
        // cout<<"Hlel"<<endl;
        queue<TreeNode*>q;
        q.push(root);
        int ans=0;
        // cout<<q.empty()<<endl;
        while(!q.empty())
        {
            int st=q.size();
           vector<int>vc;
           for(int i=0;i<st;i++)
           {
            auto it=q.front();q.pop();
            if(it->left!=nullptr)
            {
                q.push(it->left);
                vc.push_back(it->left->val);

            }
            if(it->right!=nullptr)
            {
                q.push(it->right);
                vc.push_back(it->right->val);
            }
           }
        //    for(auto it:vc)cout<<it<<" ";
        //    cout<<endl;
           if(vc.size()>0)
           ans+=check(vc.size(),vc);

        }
        return ans;
    }
    int minimumOperations(TreeNode* root) {
        return bfs(root);
    }
};

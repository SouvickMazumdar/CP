//https://leetcode.com/problems/kth-largest-sum-in-a-binary-tree/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void level_order(TreeNode* root, priority_queue<long long int>&pq)
    {
        queue<TreeNode*>q;
        q.push(root);
       
        while(!q.empty())
        {
            int size=q.size();
            long long int sum=0;
            for(int i=0;i<size;i++)
            {
                TreeNode* temp= q.front();
                sum+=temp->val;
                q.pop();
                if(temp->left)q.push(temp->left);
                if(temp->right)q.push(temp->right);
            }
            pq.push(sum);
        }
    }
    long long kthLargestLevelSum(TreeNode* root, int k) {
        priority_queue<long long int> pq;
        level_order(root,pq);
        int cnt=0;
        while(!pq.empty())
        {
            cnt++;
            long long y=pq.top();
            pq.pop();
            if(cnt==k)
            return y; 
        }
        return -1;
    }
};

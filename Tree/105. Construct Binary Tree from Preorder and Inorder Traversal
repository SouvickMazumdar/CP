/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* build_Tree(int is,int ie,vector<int>&in, int ps,int pe, vector<int>&pr, unordered_map<int,int>&mpp)
    {
        if(is>ie||ps>pe)return NULL;
        TreeNode* node=new TreeNode(pr[ps]);
        int ind_i=mpp[pr[ps]];
        int num_left=ind_i-is;
        node->left=build_Tree(is,ind_i-1,in,ps+1,ps+num_left,pr,mpp);
        node->right=build_Tree(ind_i+1,ie,in,ps+num_left+1,pe,pr,mpp);
        return node;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        unordered_map<int,int>mpp;
        int n_i=inorder.size();
        int n_p=preorder.size();
        for(int i=0;i<inorder.size();i++)
        {
            mpp[inorder[i]]=i;
        }
        TreeNode* root=build_Tree(0,n_i-1,inorder,0,n_p-1,preorder,mpp);
        return root;
    }
};

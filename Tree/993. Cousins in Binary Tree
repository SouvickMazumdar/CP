//https://leetcode.com/problems/cousins-in-binary-tree/description/
//Apart from cousin also keep a check on Siblings
//Avoid Siblings
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCousins(TreeNode* root, int x, int y) {
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty())
        {
            int size=q.size();
            int g=0;
            for(int i=0;i<size;i++)
            {
                TreeNode * cur=q.front();q.pop();
                if(cur->left && cur->right)
                {
                    if(cur->left->val==x && cur->right->val==y||cur->left->val==y && cur->right->val==x)
                    return false;
                }
                if(cur->val==x||cur->val==y)
                {
                    g++;
                }
                if(cur->left)q.push(cur->left);
                if(cur->right)q.push(cur->right);
                
            }
            if(g==2)return true;
            if(g==1)return false;
        }
        return false;
    }
};

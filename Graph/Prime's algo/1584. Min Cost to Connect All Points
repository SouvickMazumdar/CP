//https://leetcode.com/problems/min-cost-to-connect-all-points/description/
class Solution {
public:
    int minCostConnectPoints(vector<vector<int>>& points) {
     int n=points.size();
     vector<pair<int,int>>adj[n];
     for(int i=0;i<n;i++)
     {
         for(int j=0;j<n;j++)
         {
             if(i==j)continue;
             int nextNode=j;
             int dist=abs(points[i][0]-points[j][0])+abs(points[i][1]-points[j][1]);
             adj[i].push_back({nextNode,dist});
           
         }
     } 
     priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
     pq.push({0,0});
     vector<int>vis(n,0);
     int sum=0;
     while(!pq.empty())
     {
         auto it=pq.top();pq.pop();
         int wt=it.first;
         int node=it.second;
         if(vis[node]==1)continue;
         vis[node]=1;
         sum+=wt;
         for(auto it: adj[node])
         {
             int adjNode=it.first;
             int edw=it.second;
             if(!vis[adjNode])
             pq.push({edw,adjNode});
         }
     }

    
     return sum;
    }
};

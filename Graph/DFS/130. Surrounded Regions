//https://leetcode.com/problems/surrounded-regions/description/

class Solution {
public:
    void dfs(int r,int c,int n,int m,vector<vector<char>>& board, vector<vector<int>>& vis)
    {
        if(r>=0 && r<n && c>=0 && c<m && board[r][c]=='O' && !vis[r][c])
        {
            vis[r][c]=1;
            dfs(r+1,c,n,m, board, vis);
            dfs(r-1,c,n,m, board, vis);
            dfs(r,c+1,n,m, board, vis);
            dfs(r,c-1,n,m, board,vis);
        }
    }
    void solve(vector<vector<char>>& board) {
        int n=board.size();
        int m=board[0].size();
        vector<vector<int>> vis(n,vector<int>(m,0));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(i==0 || i==n-1)
                {
                    if(board[i][j]=='O')dfs(i,j,n,m,board, vis);
                }
                else if(j==0 || j==m-1)
                {
                    if(board[i][j]=='O')dfs(i,j,n,m,board, vis);
                }
            }
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(board[i][j]=='O' && !vis[i][j])
                {
                    board[i][j]='X';
                }
            }
        }
        
    }
};

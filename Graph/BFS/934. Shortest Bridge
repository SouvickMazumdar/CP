class Solution {
public:
    int dr[4]={-1,0,+1,0};
    int dc[4]={0,+1,0,-1};
    bool isValid(int i,int j,int r,int c)
    {
        if(i>=r||i<0||j>=c||j<0)return false;
        return true;
    }
    void change(int i,int j,int r,int c, vector<vector<int>>&grid)
    {
        if(i>=r||i<0||j>=c||j<0||grid[i][j]==0||grid[i][j]==2)return;
        grid[i][j]=2;
        for(int x=0;x<4;x++)
        {
            change(i+dr[x],j+dc[x],r,c,grid);
        }

    }
    int shortestBridge(vector<vector<int>>& grid) {
        int r=grid.size();
        int c=grid[0].size();
        bool check=false;
        queue<pair<int,int>>q;
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(grid[i][j]==1)
                {
                    change(i,j,r,c,grid);
                    check=true;
                    break;
                }
               
            }
             if(check)break;
        }
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(grid[i][j]==2)
                {
                    q.push({i,j});
                }
            }
        }
        int change=0;
        int size=q.size();
        
        while(!q.empty())
        {
            size=q.size();
            change++;
            while(size--)
            {
                auto it=q.front();
                int br=it.first;
                int bc=it.second;
                q.pop();
                
                for(int i=0;i<4;i++)
                {
                    int nr=br+dr[i];
                    int nc=bc+dc[i];
                    if(isValid(nr,nc,r,c))
                    {
                        if(grid[nr][nc]==0)
                        {
                            grid[nr][nc]=2;
                            q.push({nr,nc});
                        }
                        if(grid[nr][nc]==1)
                        return change-1;
                    }
                }
            }
          
        }
        return 0;
        
    }
};

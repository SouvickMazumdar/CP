class Solution {
public:

   void dfs(unordered_map<string,vector<string>>& graph,map<string,int>& visited,unordered_map<string,double>& mp, string start,string end,double &value, bool& found)
    {
        visited[start]=1;
        for(auto child: graph[start])
        {
            if(visited[child]!=1)
            {
                value*=mp[start+"->"+child];
                if(child==end)
                {
                    found=true;
                    return;
                }
                dfs(graph,visited,mp,child,end,value,found);
                if(found)
                {
                    return ;
                }
                else
                {
                    value/=mp[start+"->"+child];
                }
            }
        }
    }
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        int n=equations.size();
        unordered_map<string,double>mp;
        unordered_map<string,vector<string>>graph;
        for(int i=0;i<n;i++)
        {
            string u=equations[i][0];
            string v=equations[i][1];
            graph[u].push_back(v);
            graph[v].push_back(u);
            mp[u+"->"+v]=values[i];
            mp[v+"->"+u]=1/values[i];
        }
        int m=queries.size();
        vector<double>ans;
        for(int i=0;i<m;i++)
        {
            string start=queries[i][0];
            string end=queries[i][1];
            bool found=false;
            map<string,int>visited;
            if(graph.find(start)==graph.end()||graph.find(end)==graph.end())
            ans.push_back(-1);
            else
            {
                double value=1;
                if(start==end)found=true;
                else 
                {
                    dfs(graph,visited,mp,start,end,value,found);
                    if(found==true)found=true;
                    else
                    ans.push_back(-1);
                }
                if(found==true)ans.push_back(value);
            }
        }
        return ans;

    }
};

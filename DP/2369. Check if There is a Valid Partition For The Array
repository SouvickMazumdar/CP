class Solution {
public:
    bool validPartition(vector<int>& nums) {
        int n=nums.size();
        if(n==1)return false;
        vector<bool>dp={true,false,n>1&&nums[0]==nums[1]};
        for(int i=2;i<n;i++)
        {
            bool cur_dp=false;
            if(nums[i]==nums[i-1] && dp[1])
            cur_dp=true;
            else if(nums[i]==nums[i-1]&& nums[i]==nums[i-2] && dp[0])
            cur_dp=true;
            else if(nums[i]-nums[i-1]==1 && nums[i-1]-nums[i-2]==1 && dp[0])
            cur_dp=true;

            dp[0]=dp[1];
            dp[1]=dp[2];
            dp[2]=cur_dp;
        }
        return dp[2];
    }
};
//********************************* Memoization ************************
// class Solution {
// public:
// int dp[100005];
// int solve(int j,vector<int>&nums){
//     if(j==nums.size()){
//         return 1;
//     }
//     if(dp[j]!=-1)
//     return dp[j];
//     int c=0;
//        if(j+1<nums.size()){
//            if(nums[j]==nums[j+1])
//              c=c|solve(j+2,nums);
//        }
//        if(j+2<nums.size()){
//            if(nums[j]==nums[j+1]&&nums[j]==nums[j+2]){
//                c=c|solve(j+3,nums);
//            }
//            if(nums[j]+1==nums[j+1]&&nums[j+1]+1==nums[j+2]){
//                 c=c|solve(j+3,nums);
//            }
//        }
//        return dp[j]= c;
// }
//     bool validPartition(vector<int>& nums) {
//         memset(dp,-1,sizeof(dp));
//         return solve(0,nums);
//     }
// };

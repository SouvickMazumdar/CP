//https://leetcode.com/problems/number-of-operations-to-make-network-connected/description/

class Solution {
    int *parent;
    int *rank;
private:
    int find(int x)
    {
        while(parent[x]!=x)
        {
            x=parent[parent[x]];
        }
        return x;
    }
    void union_find(int x,int y)
    {
        int xpar=find(x);
        int ypar=find(y);
        if (xpar==ypar)return;
        else if(rank[xpar]>rank[ypar])
        {
            parent[ypar]=xpar;
            
        }
        else if(rank[xpar]<rank[ypar])
        {
            parent[xpar]=ypar;
            
        }
        else
        {
            parent[ypar]=xpar;
            rank[xpar]++;
        }
    }
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        int m=connections.size();
        if(n>m+1)
        return -1;
        parent=new int[n];
        rank=new int[n];
        for(int i=0;i<n;i++){parent[i]=i;rank[i]=0;}
        for(auto it:connections)
        {
            union_find(it[0],it[1]);
        }
        int cnt=0;
        for(int i=0;i<n;i++)
        {
            if(find(i)==i)cnt++;
        }
        return cnt-1;
    }
};


//https://leetcode.com/problems/redundant-connection/description/

class DisjointSet
{
    public:
        vector<int>rank,parent,size;
        DisjointSet(int n)
        {
            rank.resize(n+1,0);
            parent.resize(n+1);
            size.resize(n+1);
            for(int i=0;i<n;i++)
            {
                parent[i]=i;
                size[i]=1;
            }
        }
        int findUPar(int node)
        {
            if(node==parent[node])
            return node;
            return parent[node]=findUPar(parent[node]);
        }
        void unionByRank(int u, int v)
        {
            int ulp_u=findUPar(u);
            int ulp_v=findUPar(v);
            if(ulp_u==ulp_v)return;
            if(rank[ulp_u]<rank[ulp_v])
            {
               parent[ulp_u]=ulp_v;   
            }
            else if(rank[ulp_v]<rank[ulp_u])
            {
                parent[ulp_v]=ulp_u;
            }
            else
            {
                parent[ulp_v]=ulp_u;
                rank[ulp_v]++;

            }
        }
        void unionBySize(int u, int v)
        {
            int ulp_u=findUPar(u);
            int ulp_v=findUPar(v);
            if(ulp_u==ulp_v)return;
            if(size[ulp_u]<size[ulp_v])
            {
               parent[ulp_u]=ulp_v;
               size[ulp_v]+=size[ulp_u];   
            }
            else
            {
                parent[ulp_v]=ulp_u;
                size[ulp_u]=size[ulp_v];

            }
        }

};
class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        vector<int>ans;
        int maxi=INT_MIN;
        for(auto it:edges)
        {
            maxi=max(maxi,max(it[0],it[1]));
          
        }
        int n=maxi;
        DisjointSet ds(n+1);
        for(auto it:edges)
        {
            int u=it[0];
            int v=it[1];
            int count=0;
            if(ds.findUPar(u)==ds.findUPar(v))
            {
                ans.push_back(u);
                 ans.push_back(v);
                break;
            }
            else
            ds.unionBySize(u,v);
        }
        return ans;
    }
};

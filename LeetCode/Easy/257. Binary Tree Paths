/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> ans;
    vector<int>vc;
    void check(TreeNode* root)
    {
        if(!root)return;
        vc.push_back(root->val);
        if(root->left==NULL && root->right==NULL)
        {
            ans.push_back(vc);
        }
        else
        {
            check(root->left);
            check(root->right);
        }
        vc.pop_back();
       
    }
    vector<string> binaryTreePaths(TreeNode* root) {
        check(root);
        vector<string>bns;
        // cout<<"ddd";
        for(int i=0;i<ans.size();i++)
        {
            string k="";
            int j=0;
            for(;j<ans[i].size()-1;j++)
            {
               k=k+to_string(ans[i][j])+"->";
            }
             k=k+to_string(ans[i][j]);
             bns.push_back(k);
        }
        return bns;
    }
};

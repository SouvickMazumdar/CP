//https://leetcode.com/problems/path-with-minimum-effort/description/

class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
      int m=heights.size();
        int n=heights[0].size();
        
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>>pq;
        
        vector<vector<int>>dist(m,vector<int>(n,1e9));
        int dr[]={-1,0,1,0};
        int dc[]={0,-1,0,1};
        
        pq.push({0,{0,0}});
        dist[0][0]=0;
        while(!pq.empty())
        {
            auto it=pq.top();
            int diff=it.first;
            int row=it.second.first;
            int col=it.second.second;
            pq.pop();
            if(row==m-1 && col==n-1) return diff;
            for(int i=0;i<4;i++)
            {
                int new_r=row+dr[i];
                int new_c=col+dc[i];
                if(new_r>=0 && new_c>=0 && new_r<m && new_c<n)
                {
                    int new_effort=max(abs(heights[row][col]-heights[new_r][new_c]),diff);
                    if(new_effort<dist[new_r][new_c])
                    {
                        dist[new_r][new_c]=new_effort;
                        pq.push({new_effort,{new_r,new_c}});
                    }
                }
            }
            
        }
        return 0;   
    }
};

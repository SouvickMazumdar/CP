
//https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/description/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* build_tree(int is,int ie, vector<int>&in, int ps,int pe, vector<int>& post,map<int,int>&mpp)
    {
        if(is>ie||ps>pe)return NULL;
        TreeNode* root=new TreeNode(post[pe]);
        int diffi=mpp[post[pe]];
        int diffp= diffi-is;
        root->left=build_tree(is,diffi-1, in,ps,ps+diffp-1,post, mpp);
        root->right=build_tree(diffi+1,ie,in, ps+diffp, pe-1, post,mpp);
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.size()!=postorder.size())return NULL;
        map<int,int> mpp;

        for(int i=0;i<inorder.size();i++)
        {
            mpp[inorder[i]]=i;
        }
        TreeNode* root=build_tree(0,inorder.size()-1,inorder,0,postorder.size()-1,postorder,mpp);
        return root;
    }
    
};

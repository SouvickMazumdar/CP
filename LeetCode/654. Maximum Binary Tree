//https://leetcode.com/problems/maximum-binary-tree/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* check(vector<int> &num,int i,int j)
    {
        if(i>j)return NULL;
        int index=-1;
        int a=INT_MIN;
        for(int g=i;g<=j;g++)
        {
            if(num[g]>a)
            {
                a=num[g];
                index=g;
            }
        }
        TreeNode* root=new TreeNode(num[index]);
        root->left=check(num,i,index-1);
        root->right=check(num,index+1,j);
        return root;
    }
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        return check(nums,0,nums.size()-1);
    }
};

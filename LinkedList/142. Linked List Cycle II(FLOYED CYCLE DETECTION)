// Problem:
// https://leetcode.com/problems/linked-list-cycle-ii/description/

// Floyed Cycle detection
//https://www.youtube.com/watch?v=Cs3KwAsqqn4&ab_channel=KnowledgeCenter
//Expression: 2(L1+L2)=L1+L2+NC  > the distance covered by the fast pointer before colliding with the slow pointer
//=>L1=NC-L2
//Where L1= Distance of starting to first node of Cycle 
//      L2= Distance from first node of cycle to the node where slow and fast pointer meet
//      N= No. of turn of the cycle, the fast pointer made to collide with the slow pointer
//      C= Length of the Cycle i.e no. of node in the cycle
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* fast=head;
        ListNode* slow=head;
        while(fast && fast->next)
        {
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast)
            {
                slow=head;
                while(slow!=fast)
                {
                    slow=slow->next;
                    fast = fast->next;
                }
            return slow;
            }
            
        }
        return NULL;
    }
};

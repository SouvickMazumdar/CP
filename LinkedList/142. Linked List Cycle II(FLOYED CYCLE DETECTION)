// Problem:
// https://leetcode.com/problems/linked-list-cycle-ii/description/

// Floyed Cycle detection
//https://www.youtube.com/watch?v=Cs3KwAsqqn4&ab_channel=KnowledgeCenter

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* fast=head;
        ListNode* slow=head;
        while(fast && fast->next)
        {
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast)
            {
                slow=head;
                while(slow!=fast)
                {
                    slow=slow->next;
                    fast = fast->next;
                }
            return slow;
            }
            
        }
        return NULL;
    }
};

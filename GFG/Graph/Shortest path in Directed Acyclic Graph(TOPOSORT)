//https://practice.geeksforgeeks.org/problems/shortest-path-in-undirected-graph

class Solution {
  private:
     void dfs_topo(int node, int vis[],stack<int>&st, vector<pair<int,int>>adj[])
     {
         vis[node]=1;
         for(auto it: adj[node])
         {
             if(!vis[it.first])dfs_topo(it.first, vis,st,adj);
         }
         st.push(node);
         
     }
  public:
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        // code here
        vector<pair<int,int>> adj[N];
        for(int i=0;i<M;i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            int wt=edges[i][2];
            adj[u].push_back({v,wt});
        }
        int vis[N]={0};
        stack<int>st;
        for(int i=0;i<N;i++)
        {
            if(!vis[i])
            {
                dfs_topo(i,vis,st,adj);
            }
        }
        // Step 2: Do the second thing
        vector<int>dist(N);
        for(int i=0;i<N;i++)dist[i]=1e9;
        dist[0]=0;
        int c=0;
        while(!st.empty())
        {
            
            int node=st.top();
            st.pop();
            // if(node!=0 && c==0){
            //     continue;
            // }
            // c=1;
            for(auto it:adj[node])
            {
                int v=it.first;
                int wt=it.second;
                dist[v]=min(dist[v],dist[node]+wt);
            }
        }
        for(int i=0;i<N;i++)
        {
            if(dist[i]==1e9)dist[i]=-1;
        }
        return dist;
    }
    
};
